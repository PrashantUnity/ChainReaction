<MudDialog Class="starry-background">
    <DialogContent>
        <MudPaper MinHeight="500px" Elevation="0" Style="background-color:transparent;">

            <div class="containerLeader">
                <div class="leaderboard">
                    <div class="head">

                        <h1><MudIcon Icon="@Icons.Material.Filled.Leaderboard" Color="Color.Warning" /> Leader Board</h1>
                    </div>
                    <div class="body">
                        <ol> 
                            @foreach (var player in ScoreLeaderWithTime.OrderByDescending(x=>x.Value.Period))
                            {
                                <li style="background: @($"{player.Value.color}");">
                                    <mark>@player.Key</mark>
                                     <small>@player.Value.Date</small>
                                </li>
                            }
                        </ol>
                    </div>
                </div>
            </div>
        </MudPaper>
        <MudText Align="Align.Center">
            <MudButton OnClick="Submit" Variant="Variant.Filled" Size="Size.Large" Color="Color.Info" Class="my-4">Home</MudButton>
        </MudText>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!; 
    [Parameter] public Dictionary<string, (DateTime Date, string color,int Period)> ScoreLeaderWithTime { get; set; } = new();
    [Inject] public NavigationManager Manager { get; set; } = null!;

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
        Manager.NavigateTo("");
    }
    void Cancel() => MudDialog.Cancel();
}
<style>

    /* container */
    .containerLeader {
        width: max-content;
        height: auto;
        border-radius: 10px;
        background-color: white;
        box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1;
        overflow: hidden;
    }

    /* leaderboard */
    .leaderboard {
        background: linear-gradient(to bottom, #3a404d, #181c26);
    }

        /* head */
        .leaderboard .head {
            padding: 20px 16px;
            color: snow;
            font-size: 20px;
            text-align: center;
        }

            .leaderboard .head h1 {
                display: inline-block;
                margin-left: 4px;
            }

        /* body */
        .leaderboard .body {
            color: snow;
            font-size: 16px;
        }

        .leaderboard ol {
            counter-reset: number;
        }

        .leaderboard li {
            padding: 16px;
            display: flex;
        }

            .leaderboard li mark {
                flex-grow: 1;
                color: snow;
                background-color: transparent;
            }

            .leaderboard li:before {
                counter-increment: number;
                content: counter(number) ".";
                margin-right: 4px;
            }

    .starry-background {
        background-color:#e5e9f4;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1600 900'%3E%3Ccircle cx='100' cy='100' r='80' fill='%23FF000034' /%3E%3Ccircle cx='300' cy='800' r='100' fill='%2300FF0034' /%3E%3Ccircle cx='500' cy='100' r='120' fill='%230000FF34' /%3E%3Ccircle cx='700' cy='200' r='90' fill='%23FFFF0034' /%3E%3Ccircle cx='900' cy='400' r='110' fill='%2300FFFF' /%3E%3Ccircle cx='1100' cy='500' r='80' fill='%23FF00FF34' /%3E%3Ccircle cx='1300' cy='100' r='100' fill='%23FF000034' /%3E%3Ccircle cx='900' cy='200' r='120' fill='%2300FF0034' /%3E%3C/svg%3E");
        animation: stars 200s infinite linear;
    }

    @@keyframes stars {
        from {
            background-position: 0 0;
        }

        to {
            background-position: 10000px 5000px;
        }
    }
</style>